package com.st0rmtroop3r.telegramchart;

import android.content.Context;
import android.util.JsonReader;
import android.util.Log;
import android.util.Pair;

import com.st0rmtroop3r.telegramchart.enitity.Chart;
import com.st0rmtroop3r.telegramchart.enitity.ChartLine;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class DataProvider {

    final static String TAG = DataProvider.class.getSimpleName();

    static int[] y0 = {
            0, 150, 300,
            37,20,32,39,32,35,19,65,36,62,
            113,69,120,60,51,49,71,122,149,69,
            57,21,33,55,92,62,47,50,56,116,
            63,60,55,65,76,33,45,64,54,81,
            180,123,106,37,60,70,46,68,46,51,
            300,
            33,57,75,70,95,70,50,68,63,66,
            53,38,52,109,121,53,36,71,96,55,
            58,29,31,55,52,44,126,191,73,87,
            255,278,219,170,129,125,126,84,65,53,
            154,57,71,64,75,72,39,47,52,73,

//            89,156,86,105,88,45,33,56,142,124,
            0, 75, 150, 300};

    static int[] y1 = {
            300, 150, 0,
            22,12,30,40,33,23,18,41,45,69,
            57,61,70,47,31,34,40,55,27,57,
            48,32,40,49,54,49,34,51,51,51,
            66,51,94,60,64,28,44,96,49,73,
            30,88,63,42,56,67,52,67,35,61,
            300,
            40,55,63,61,105,59,51,76,63,57,
            47,56,51,98,103,62,54,104,48,41,
            41,37,30,28,26,37,65,86,70,81,
            54,74,70, 50,74,79,85,62,36,46,
            68,43,66,50,28,66,39,23,63,74,

//            83,66,40,60,29,36,27,54,89,50,
            300, 150, 75, 0};

    static long[] x = {
            1542412800000L,1542499200000L,1542585600000L,1542672000000L,1542758400000L,1542844800000L,
            1542931200000L,1543017600000L,1543104000000L,1543190400000L,1543276800000L,1543363200000L,
            1543449600000L,1543536000000L,1543622400000L,1543708800000L,1543795200000L,1543881600000L,
            1543968000000L,1544054400000L,1544140800000L,1544227200000L,1544313600000L,1544400000000L,
            1544486400000L,1544572800000L,1544659200000L,1544745600000L,1544832000000L,1544918400000L,
            1545004800000L,1545091200000L,1545177600000L,1545264000000L,1545350400000L,1545436800000L,
            1545523200000L,1545609600000L,1545696000000L,1545782400000L,1545868800000L,1545955200000L,
            1546041600000L,1546128000000L,1546214400000L,1546300800000L,1546387200000L,1546473600000L,
            1546560000000L,1546646400000L,1546732800000L,1546819200000L,1546905600000L,1546992000000L,
            1547078400000L,1547164800000L,1547251200000L,1547337600000L,1547424000000L,1547510400000L,
            1547596800000L,1547683200000L,1547769600000L,1547856000000L,1547942400000L,1548028800000L,
            1548115200000L,1548201600000L,1548288000000L,1548374400000L,1548460800000L,1548547200000L,
            1548633600000L,1548720000000L,1548806400000L,1548892800000L,1548979200000L,1549065600000L,
            1549152000000L,1549238400000L,1549324800000L,1549411200000L,1549497600000L,1549584000000L,
            1549670400000L,1549756800000L,1549843200000L,1549929600000L,1550016000000L,1550102400000L,
            1550188800000L,1550275200000L,1550361600000L,1550448000000L,1550534400000L,1550620800000L,
            1550707200000L,1550793600000L,1550880000000L,1550966400000L,1551052800000L,1551139200000L,
            1551225600000L,1551312000000L,1551398400000L,1551484800000L,1551571200000L,1551657600000L,
            1551744000000L,1551830400000L,1551916800000L,1552003200000L};
    
    static long[] xMax = {1520035200000L,1520121600000L,1520208000000L,1520294400000L,1520380800000L,1520467200000L,1520553600000L,1520640000000L,1520726400000L,1520812800000L,1520899200000L,1520985600000L,1521072000000L,1521158400000L,1521244800000L,1521331200000L,1521417600000L,1521504000000L,1521590400000L,1521676800000L,1521763200000L,1521849600000L,1521936000000L,1522022400000L,1522108800000L,1522195200000L,1522281600000L,1522368000000L,1522454400000L,1522540800000L,1522627200000L,1522713600000L,1522800000000L,1522886400000L,1522972800000L,1523059200000L,1523145600000L,1523232000000L,1523318400000L,1523404800000L,1523491200000L,1523577600000L,1523664000000L,1523750400000L,1523836800000L,1523923200000L,1524009600000L,1524096000000L,1524182400000L,1524268800000L,1524355200000L,1524441600000L,1524528000000L,1524614400000L,1524700800000L,1524787200000L,1524873600000L,1524960000000L,1525046400000L,1525132800000L,1525219200000L,1525305600000L,1525392000000L,1525478400000L,1525564800000L,1525651200000L,1525737600000L,1525824000000L,1525910400000L,1525996800000L,1526083200000L,1526169600000L,1526256000000L,1526342400000L,1526428800000L,1526515200000L,1526601600000L,1526688000000L,1526774400000L,1526860800000L,1526947200000L,1527033600000L,1527120000000L,1527206400000L,1527292800000L,1527379200000L,1527465600000L,1527552000000L,1527638400000L,1527724800000L,1527811200000L,1527897600000L,1527984000000L,1528070400000L,1528156800000L,1528243200000L,1528329600000L,1528416000000L,1528502400000L,1528588800000L,1528675200000L,1528761600000L,1528848000000L,1528934400000L,1529020800000L,1529107200000L,1529193600000L,1529280000000L,1529366400000L,1529452800000L,1529539200000L,1529625600000L,
            1529712000000L,1529798400000L,1529884800000L,1529971200000L,1530057600000L,1530144000000L,1530230400000L,1530316800000L,1530403200000L,1530489600000L,1530576000000L,1530662400000L,1530748800000L,1530835200000L,1530921600000L,1531008000000L,1531094400000L,1531180800000L,1531267200000L,1531353600000L,1531440000000L,1531526400000L,1531612800000L,1531699200000L,1531785600000L,1531872000000L,1531958400000L,1532044800000L,1532131200000L,1532217600000L,1532304000000L,1532390400000L,1532476800000L,1532563200000L,1532649600000L,1532736000000L,1532822400000L,1532908800000L,1532995200000L,1533081600000L,1533168000000L,1533254400000L,1533340800000L,1533427200000L,1533513600000L,1533600000000L,1533686400000L,1533772800000L,1533859200000L,1533945600000L,1534032000000L,1534118400000L,1534204800000L,1534291200000L,1534377600000L,1534464000000L,1534550400000L,1534636800000L,1534723200000L,1534809600000L,1534896000000L,1534982400000L,1535068800000L,1535155200000L,1535241600000L,1535328000000L,1535414400000L,1535500800000L,1535587200000L,1535673600000L,1535760000000L,1535846400000L,1535932800000L,1536019200000L,1536105600000L,1536192000000L,1536278400000L,1536364800000L,1536451200000L,1536537600000L,1536624000000L,1536710400000L,1536796800000L,1536883200000L,1536969600000L,1537056000000L,1537142400000L,1537228800000L,1537315200000L,1537401600000L,1537488000000L,1537574400000L,1537660800000L,1537747200000L,1537833600000L,1537920000000L,1538006400000L,1538092800000L,1538179200000L,1538265600000L,1538352000000L,1538438400000L,1538524800000L,1538611200000L,1538697600000L,1538784000000L,1538870400000L,1538956800000L,1539043200000L,1539129600000L,1539216000000L,1539302400000L,
            1539388800000L,1539475200000L,1539561600000L,1539648000000L,1539734400000L,1539820800000L,1539907200000L,1539993600000L,1540080000000L,1540166400000L,1540252800000L,1540339200000L,1540425600000L,1540512000000L,1540598400000L,1540684800000L,1540771200000L,1540857600000L,1540944000000L,1541030400000L,1541116800000L,1541203200000L,1541289600000L,1541376000000L,1541462400000L,1541548800000L,1541635200000L,1541721600000L,1541808000000L,1541894400000L,1541980800000L,1542067200000L,1542153600000L,1542240000000L,1542326400000L,1542412800000L,1542499200000L,1542585600000L,1542672000000L,1542758400000L,1542844800000L,1542931200000L,1543017600000L,1543104000000L,1543190400000L,1543276800000L,1543363200000L,1543449600000L,1543536000000L,1543622400000L,1543708800000L,1543795200000L,1543881600000L,1543968000000L,1544054400000L,1544140800000L,1544227200000L,1544313600000L,1544400000000L,1544486400000L,1544572800000L,1544659200000L,1544745600000L,1544832000000L,1544918400000L,1545004800000L,1545091200000L,1545177600000L,1545264000000L,1545350400000L,1545436800000L,1545523200000L,1545609600000L,1545696000000L,1545782400000L,1545868800000L,1545955200000L,1546041600000L,1546128000000L,1546214400000L,1546300800000L,1546387200000L,1546473600000L,1546560000000L,1546646400000L,1546732800000L,1546819200000L,1546905600000L,1546992000000L,1547078400000L,1547164800000L,1547251200000L,1547337600000L,1547424000000L,1547510400000L,1547596800000L,1547683200000L,1547769600000L,1547856000000L,1547942400000L,1548028800000L,1548115200000L,1548201600000L,1548288000000L,1548374400000L,1548460800000L,1548547200000L,1548633600000L,1548720000000L,1548806400000L,1548892800000L,1548979200000L,
            1549065600000L,1549152000000L,1549238400000L,1549324800000L,1549411200000L,1549497600000L,1549584000000L,1549670400000L,1549756800000L,1549843200000L,1549929600000L,1550016000000L,1550102400000L,1550188800000L,1550275200000L,1550361600000L,1550448000000L,1550534400000L,1550620800000L,1550707200000L,1550793600000L,1550880000000L,1550966400000L,1551052800000L,1551139200000L,1551225600000L,1551312000000L,1551398400000L,1551484800000L,1551571200000L,1551657600000L,1551744000000L,1551830400000L,1551916800000L,1552003200000L,1552089600000L};

    static String y0color = "#3DC23F";
    static String y1color = "#F34C44";

    static Pair<int[], String> getY0Data() {
        return new Pair<>(y0, y0color);
    }

    static Pair<int[], String> getY1Data() {
        return new Pair<>(y1, y1color);
    }

    static Pair<int[], String> getY0ShortData(int arraySize) {
        return new Pair<>(Arrays.copyOf(y0, arraySize), y0color);
    }

    static Pair<int[], String> getY1ShortData(int arraySize) {
        return new Pair<>(Arrays.copyOf(y1, arraySize), y1color);
    }

    static Pair<int[], String> get10(int arraySize) {
        return new Pair<>(new int[]{1,0}, y1color);
    }

    static List<Chart> readChartsData(Context appContext, int resId) {
        List<Chart> charts = new ArrayList<>();
        InputStream in = appContext.getResources().openRawResource(resId);
        try (JsonReader jsonReader = new JsonReader(new InputStreamReader(in))) {
            charts = readCharts(jsonReader);
        } catch (IOException e) {
            e.printStackTrace();
        }
        for (Chart chart : charts) {
            Log.w(TAG, "readChartsData: xData.length " + chart.xData.length);
            for (ChartLine chartLine : chart.chartLines) {
                Log.i(TAG, "readChartsData: " + chartLine.id + ", name " + chartLine.name + ", color " + chartLine.color + ", yData.length " + chartLine.yData.length);
            }
        }
        return charts;
    }

    private static List<Chart> readCharts(JsonReader jsonReader) throws IOException {
        List<Chart> charts = new ArrayList<>();

        jsonReader.beginArray();

        while (jsonReader.hasNext()) {
            charts.add(readChart(jsonReader));
        }
        jsonReader.endArray();
        return charts;
    }

    private static Chart readChart(JsonReader jsonReader) throws IOException {
        Chart chart = new Chart();
        jsonReader.beginObject();

        while (jsonReader.hasNext()) {
            switch (jsonReader.nextName()) {
                case "columns":
                    readColumns(jsonReader, chart);
                    break;
                case "names":
                    readNames(jsonReader, chart);
                    break;
                case "colors":
                    readColors(jsonReader, chart);
                    break;
                default:
                    jsonReader.skipValue();
                    break;
            }
        }

        jsonReader.endObject();
        return chart;
    }

    private static void readColumns(JsonReader jsonReader, Chart chart) throws IOException {
        jsonReader.beginArray();
        while (jsonReader.hasNext()) {
            Pair<String, List<Long>> pair = readColumn(jsonReader);
            if (pair.first.startsWith("x")) {
                chart.xData = new long[pair.second.size()];
                for (int i = 0; i < pair.second.size(); i++) {
                    chart.xData[i] = pair.second.get(i);
                }
            }
            if (pair.first.startsWith("y")) {
                ChartLine chartLine = new ChartLine();
                chartLine.id = pair.first;
                chartLine.yData = new long[pair.second.size()];
                for (int i = 0; i < pair.second.size(); i++) {
                    chartLine.yData[i] = pair.second.get(i);
                }
                chart.chartLines.add(chartLine);
            }
        }
        jsonReader.endArray();
    }

    private static Pair<String, List<Long>> readColumn(JsonReader jsonReader) throws IOException {
        List<Long> longs = new ArrayList<>();
        jsonReader.beginArray();
        String id = jsonReader.nextString();
        while (jsonReader.hasNext()) {
            long nextLong = jsonReader.nextLong();
            longs.add(nextLong);
        }
        jsonReader.endArray();
        return new Pair<>(id, longs);
    }

    private static void readNames(JsonReader jsonReader, Chart chart) throws IOException {
        jsonReader.beginObject();
        while (jsonReader.hasNext()) {
            String nextName = jsonReader.nextName();
            for (ChartLine chartLine : chart.chartLines) {
                if (nextName.equals(chartLine.id)) {
                    chartLine.name = jsonReader.nextString();
                }
            }
        }
        jsonReader.endObject();
    }

    private static void readColors(JsonReader jsonReader, Chart chart) throws IOException {
        jsonReader.beginObject();
        while (jsonReader.hasNext()) {
            String nextName = jsonReader.nextName();
            for (ChartLine chartLine : chart.chartLines) {
                if (nextName.equals(chartLine.id)) {
                    chartLine.color = jsonReader.nextString();
                }
            }
        }
        jsonReader.endObject();
    }



































}

